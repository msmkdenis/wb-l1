package main

// new comment

import "fmt"

/*
	Дана структура Human (с произвольным набором полей и методов).
	Реализовать встраивание методов в структуре Action от родительской структуры Human (аналог наследования).
*/

type Human struct {
	Name string
	Age  int
}

type Animal struct {
	Name string
}

func (a *Animal) SayBye() {
	fmt.Println("It will be wrong to try to call me")
}

type Action struct {
	Human
	Animal
}

func (a *Action) SayHello() {
	fmt.Println("Hello I am action struct")
}

/*
	Применение -  расширение возможностей внешних типов.
	Например, необходимо иметь все возможности, которые представляет тип, находящийся во внешнем пакете, но мы не можем изменить сам пакет.
	В таком случае можно создать свой тип, встроить в него внешний и добавить необходимые методы и поля.
	Полученный тип будет содержать методы встроенного типа.

	Если вложенный тип описан в другом пакете, то использующий его тип имеет доступ только к экспортируемым (публичным) методам и полям.

	Именованное поле (метод) структуры скрывает поле (метод) с тем же именем для вложенных структур.
	Имя верхнего уровня доминирует над именами более низких уровней.

	Если имя поля (метода) встречается на том же уровне вложенности (дупликация имён), и оно использовано в коде, это ошибка.
	Если дупликация имён существует, но это имя не используется в коде, компилятор не выдаст ошибку.

	Внешний объект не может быть приведён к типу внутреннего встроенного объекта с помощью приведения типов.
*/

func main() {
	a := Action{Human{"Ivan", 25}, Animal{"Cat"}}
	a.PrintName()
	a.PrintAge()
	a.SayHello()       // Приоритет имеет метод внешнего объекта
	a.Human.SayHello() // Если необходимо вызвать именно метод встроенного объекта
	//a.SayBye() // Ошибка компиляции - невозможно определить у какой встроенной структуры вызвать метод
}

func (h *Human) PrintName() {
	println(h.Name)
}

func (h *Human) PrintAge() {
	println(h.Age)
}

func (h *Human) SayHello() {
	fmt.Println("Hello I am human struct")
}

func (h *Human) SayBye() {
	fmt.Println("It will be wrong to try to call me")
}
